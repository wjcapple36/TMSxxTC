/*! \page epollserverbug EpollServer 开发历史
This page is for advanced users.
Make sure you have first read \ref intro "todo".

* @section bug
	- todo more bug
	- 00x-201x-xx-xx:
	- 006-2015-04-18: fix 005\n
	但是未加线程同步，当前情况加了线程同步更容易导致内存非法访问，后期会修补
	- 005-2015-04-18: bug ep_StopServer没关闭原始线程，导致创建新线程后有内存非法访问的情况
	- 004-2015-04-18: bug accept后立即在pFUI_OnAccept里发送数据，导致远端“段错误”，原因由于远端
	先在pFUI_OnConnect里执行“接收缓存初始化”，如果在未完成“接收缓存初始化”，甚至为调用pFUI_Onconnect前就接收数据，将导致“段错误”，简易应用层pFUI_OnRecv自己检测是否初始化，虽然epollserver也可以检测完成pFUI_OnAccept后才允许调用pFUI_OnRecv，但不是epollserver的义务
	- 003-2015-04-03: fix 诸多epollserver回调pFUI_xxx函数输入参数全是0问题，之前只留下接口没有具体测试，故意将接口参数全是0，出现bug后方便差错
	- 002-2015-03-19: bug 连接成功返回0但是仍然显示fd无效Connect: Bad file descriptor
	- 001-2015-03-19: fix ep_Connect不返回sockfd

2015-01-24:
	- 001:解决服务器自连接数百个同时执行关闭操作发生Segmentation Fault
	- 002:解决sh_analyse输入参数错误，内存越界访问，导致服务器不可扑捉当机

This page is for advanced users. ep
* @section notes Version History
- V1.0.0_TODO
	-# 完成TCP框架搭建
- V1.0.0Bate_20150121
	-# 完成epoll server TCP客户端状态管理，1000个客户端连接10字节以内小数据量心跳数据异常
	-# 未添加调试线程，待一段时间测试证明该客户端状态管理的确无漏洞后才加上调试线程，避免故障位置不好定位（究竟是客户端状态管理本身就没做好，还是调试线程带来的新问题）
	-# 解决数百个客户端同时断开后内存越界问题
	-# 解决minishell内存越界问题
	-# 采用libreadline5.0+实现minishell命令历史记录，后期加上命令补全和命令提示功能
	-# bug服务器与客户端连接，服务器端主动断开存在TIMEOUT计时，证明没有友好的完成4次退出握手，客户端主动退出可以正常释放SOCKET占用情况。以前是没有这个问题的，“解决数百个客户端同时断开”bug而付出的代价，以后会改进

*/

/*! \page miniver minishell_core version
This page is for advanced users. minishell
*/