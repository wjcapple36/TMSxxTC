/*! \mainpage TMSxxTC 项目

\section TMSxx项目包含
- 网络管理 epollserver.c 、网络应用层回调接口 ep_app.c \n
- 控制台命令核 minishell_core.c 、控制台命令实现 cmd_server.c 、 cmd_tmsxx.c \n
- glink协议包 glink.c \n
- TMSxx协议封包/解析 tmsxx.c 、TMSxx协议应用层回调接口 tms_app.c 、环形缓冲 bipbuffer.c 

* @section 必看内容
- \subpage workhis "每日工作简述，建议阅读帮助文档前先看这部分，了解每次发布doxygen文档更新什么内容"

* @section 开发记录
- \subpage tmsxx "TMSxx"
- \subpage epollserverbug "epollserver history"
	- \subpage epollserverbug
- \subpage minishellbug "minishell_core history"
- \subpage gl "glink history"



|     模块    		|     工作简述        		|      缺陷      |    测试日志   
| :------------: 	| :---------------: 		| :------------: | :------------
|     expol       	|    \subpage epollserverbug|   xxxx-xx-xx   | 1.xxxxx    
|        minishell  |      \subpage minishellbug|                | 2.xxxxx

* @section 设计原型
*	- 采用epoll机制做服务器，主要工作负责维护客户端节点链表，通知用户层客户端连接状态，特点：
		-# epoll拥有自己的线程，一个调试线程、若干个工作线程
		-# 用户层和分离
		-# 与协议无关
*	- 对应用层提供两种调用机制：
		-# 应用层主动查找消息队列，实时性差一些，但工作在用户线程，不会受用户层代码缺陷影响epoll server效率
		-# epoll server 调用回调函数执行用户层代码，实时性高，工作在epoll server 线程，受用户层代码缺陷影响epoll server效率
*	- 每个客户端采用类似LWIP的链式缓存方式
*	- [扩展][验证阶段]epoll除了广泛应用的Socket通信外，实际上还能用于IO驱动，但不能直接拿TCP版的epoll server，待摸索清楚epoll在普通IO文件和Socket下的异同后，再将它们整合，目前已经测试证明epoll可以用于以下设备文件
		-# 串口设备
		-# 管道设备

* @section 实际成果
*	- 采用epoll机制做服务器，主要工作负责维护客户端节点链表，通知用户层客户端连接状态，特点：
		-# epoll完成单线程连接状态维护
		-# 为对用户层回调接口做过多的保护，有内存非法访问的可能
		-# 暂时放弃调试线程
		-# 完成对外回调机制
*	- minishell控制台底层内核
		-# 目前采用readline做第三方库，如果windows平台可以成功移植readline，则不放弃它
		-# -O1/2/3优化必须用在shell.h宏INIT_CMD里初始化所有命令，不能采用W_BOOT_CMD命令形式，该方式可以移植到任何平台
		-# -O0形式可以采用W_BOOT_CMD形式初始化命令，也可以同采用上面初始化宏INIT_CMD的形式，该方式只能用于GCC编译器的linux平台

* @section 例程
*	- 提供3个历程，运行examples里的Makefile生成
		-# exam_epollserver.elf：epollserver接口使用，包括回调函数文件ep_examapp.c，主程序文件exam_epollserver.c
		-# exam_bipbuffer.elf：两段式缓存测试
		-# exam_tr485.elf：tr485测试程序（未完成）
*	- 提供1个测试板应用程序
		-# 运行主目录下的Makefile可生成，如果提示找不到-lreadline等库\n
		x86平台解压libx86.tar到/usr/local/install文件夹，编译时加入L/usr/local/install/lib\n
		4412平台解压lib4412.tar到/usr/4412/install文件夹，编译时加入L/usr/4412/install/lib
		-# 里面使用了MiniShell和readline库，命令表格式参考UBoot，以后会改变命令表格式，这两个库做UI不用管，用于后台调试用
		-# 命令行
			-# help：帮助命令
			-# quit：退出
			-# connect 127.0.0.1 6000：连接到本地6000端口
			-# server stop：停止服务
			-# server run：运行服务
			-# inf：查看当前的连接信息，分别是序号index、FD文件描述符、本地地址/端口locate、远端地址/端口remote
			-# epsend 5：向FD为5的设备每秒发送10KB，其中FD通过inf命令查阅，按Ctrl+C停止
			-# unhook：关闭消息SIGINT的消息钩子，否则在运行epsend后不能按下Ctrl+C退出程序



*/
